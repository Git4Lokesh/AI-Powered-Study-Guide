<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quick Notes - <%= topic %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <script>
    window.MathJax = {
      tex: {
        inlineMath: [
          ['$', '$'], 
          ['\\(', '\\)'],
          ['//', '//']
        ],
        displayMath: [
          ['$$', '$$'], 
          ['\\[', '\\]'],
          ['\\\\', '\\\\']
        ],
        processEscapes: true,
        processEnvironments: true,
        macros: {
          RR: '{\\mathbb{R}}',
          ZZ: '{\\mathbb{Z}}',
          NN: '{\\mathbb{N}}',
          QQ: '{\\mathbb{Q}}',
          CC: '{\\mathbb{C}}'
        }
      },
      options: {
        renderActions: {
          addMenu: []
        }
      },
      startup: {
        ready: () => {
          MathJax.startup.defaultReady();
          MathJax.startup.promise.then(() => {
            console.log('MathJax initial typesetting complete');
          });
        }
      }
    };
    </script>
    <style>
.selected-text-display {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    padding: 8px;
    margin-bottom: 12px;
}

.selected-text-highlight {
    background: #fff3cd;
    border-radius: 3px;
    padding: 4px 6px;
    font-weight: 500;
    color: #856404;
}

.response-context {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 15px;
}

.context-section {
    margin-bottom: 10px;
}

.context-section:last-child {
    margin-bottom: 0;
}

.context-label {
    font-weight: 600;
    color: var(--bs-primary);
    font-size: 0.9rem;
    margin-bottom: 4px;
}

.context-content {
    font-size: 0.9rem;
    line-height: 1.4;
    color: #495057;
}

.question-content {
    font-style: italic;
    color: #6c757d;
}

.custom-question-section {
    border-top: 1px solid #e9ecef;
    padding-top: 8px;
}

.custom-question-section .input-group {
    display: flex;
}

.custom-question-section input {
    flex: 1;
    border: 1px solid #dee2e6;
    padding: 8px 12px;
    font-size: 0.9rem;
}

.custom-question-section input:focus {
    border-color: var(--bs-primary);
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    outline: 0;
}

.math-equation { 
    color: #d63384;
    font-weight: 500;
}

mjx-container[display="true"] {
    margin: 1em 0;
    text-align: center;
}

mjx-container[display="false"] {
    display: inline-block;
    margin: 0 0.1em;
}

.text-selection-popup {
    position: fixed;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.2);
    z-index: 1000;
    display: none;
    width: 300px;
    max-height: 80vh;
    overflow-y: auto;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    animation: popupSlideIn 0.3s ease-out;
}

@keyframes popupSlideIn {
    from {
        opacity: 0;
        transform: translateY(-50%) translateX(20px);
    }
    to {
        opacity: 1;
        transform: translateY(-50%) translateX(0);
    }
}

.expansion-option {
    display: flex;
    align-items: center;
    padding: 14px 18px;
    margin: 4px 0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    background: transparent;
    width: 100%;
    text-align: left;
    font-size: 1rem;
    font-weight: 500;
}

.expansion-option:hover {
    background: #f8f9fa;
    color: var(--bs-primary);
    transform: translateX(2px);
}

.expansion-option:active {
    transform: translateX(1px);
}

.expansion-option i {
    margin-right: 12px;
    font-size: 1rem;
    width: 20px;
    text-align: center;
}

.side-expansion-bubble {
    position: fixed;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 12px;
    padding: 16px;
    width: 320px;
    max-height: 400px;
    overflow-y: auto;
    box-shadow: 0 8px 32px rgba(0,0,0,0.12);
    z-index: 1001;
    display: none;
    font-size: 0.9rem;
    line-height: 1.4;
    right: 20px;
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateX(20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.side-expansion-bubble::before {
    content: '';
    position: absolute;
    left: -8px;
    top: 20px;
    width: 0;
    height: 0;
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-right: 8px solid white;
}

.side-expansion-bubble::after {
    content: '';
    position: absolute;
    left: -9px;
    top: 20px;
    width: 0;
    height: 0;
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-right: 8px solid #dee2e6;
}

.side-expansion-bubble .bubble-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e9ecef;
}

.side-expansion-bubble .bubble-title {
    font-weight: 600;
    color: var(--bs-primary);
    font-size: 1rem;
    margin: 0;
    flex-grow: 1;
}

.side-expansion-bubble .close-bubble {
    background: none;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    color: #6c757d;
    padding: 0;
    margin-left: 10px;
    line-height: 1;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.side-expansion-bubble .close-bubble:hover {
    background: #f8f9fa;
    color: #dc3545;
}

.side-expansion-bubble .bubble-content {
    color: #495057;
}

.side-expansion-bubble .bubble-content h6 {
    margin: 0 0 8px 0;
    color: var(--bs-primary);
    font-size: 0.95rem;
}

.side-expansion-bubble .bubble-content p {
    margin: 0 0 8px 0;
    line-height: 1.5;
}

.side-expansion-bubble .bubble-content ul {
    margin: 8px 0;
    padding-left: 18px;
}

.side-expansion-bubble .bubble-content li {
    margin: 4px 0;
    font-size: 0.85rem;
    line-height: 1.4;
}

.side-expansion-bubble .bubble-content strong {
    color: var(--bs-primary);
}

.expansion-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    color: #6c757d;
    font-size: 0.9rem;
}

.selected-text-preview {
    background: #f8f9fa;
    padding: 8px 12px;
    border-radius: 6px;
    margin-bottom: 12px;
    border-left: 3px solid var(--bs-primary);
    font-size: 0.85rem;
    font-style: italic;
    color: #6c757d;
}

.notes-container-wrapper {
    position: relative;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    .side-expansion-bubble {
        width: 280px;
        right: 10px;
    }
    .text-selection-popup {
        width: 280px;
        right: 10px;
    }
}

@media (max-width: 768px) {
    .side-expansion-bubble {
        width: 90%;
        right: 5%;
        left: 5%;
        max-width: none;
    }
    .text-selection-popup {
        width: 90%;
        right: 5%;
        left: 5%;
        max-width: none;
    }
    
    .side-expansion-bubble::before,
    .side-expansion-bubble::after {
        display: none;
    }
}
</style>

</head>
<body class="bg-gradient-primary">
    <div class="container-fluid min-vh-100 py-4">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-10 col-xl-8">
                    <div class="d-flex align-items-center justify-content-between mb-4">
                        <a href="/" class="btn btn-outline-light btn-lg rounded-pill px-4">
                            <i class="bi bi-arrow-left me-2"></i>
                            Back to Dashboard
                        </a>
                        <div class="text-end">
                            <small class="text-white-50 d-block">Study Materials</small>
                        </div>
                    </div>
                    <div class="text-center mb-5">
                        <div class="d-inline-flex align-items-center bg-white bg-opacity-10 rounded-pill px-4 py-2 mb-3">
                            <i class="bi bi-journal-text text-white me-2"></i>
                            <span class="text-white fw-semibold">Quick Notes</span>
                        </div>
                        <h1 class="display-5 fw-bold text-white mb-2"><%= topic %></h1>
                        <p class="text-white-50 mb-0">
                            <i class="bi bi-mortarboard me-2"></i>
                            Grade Level: <%= gradeLevel %>
                        </p>
                        <p class="text-white-50 mb-0">
                          <i class="bi bi-mortarboard me-2"></i>
                          Highlight Text for Further Clarification!
                        </p>
                    </div>

                    <div class="notes-container-wrapper">
                        <div class="card border-0 shadow-lg rounded-4" id="notes-container">
                            <div class="card-header bg-white border-0 py-4">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div class="d-flex align-items-center">
                                        <div class="bg-primary bg-opacity-10 rounded-circle p-2 me-3">
                                            <i class="bi bi-book text-primary fs-5"></i>
                                        </div>
                                        <div>
                                            <h5 class="card-title mb-1 text-dark fw-semibold">Study Notes</h5>
                                            <small class="text-muted">Comprehensive learning material</small>
                                        </div>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-outline-primary btn-sm rounded-pill" onclick="window.print()">
                                            <i class="bi bi-printer me-1"></i>
                                            Print
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm rounded-pill" onclick="copyToClipboard()">
                                            <i class="bi bi-clipboard me-1"></i>
                                            Copy
                                        </button>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card-body p-5">
                                <div class="notes-content">
                                    <div class="notes-text lh-lg" id="notes-text">
                                        <%- content %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col-md-6 mb-3">
                            <a href="/" class="btn btn-outline-light btn-lg w-100 py-3">
                                <i class="bi bi-house me-2"></i>
                                Back to Dashboard
                            </a>
                        </div>
                        <div class="col-md-6 mb-3">
                            <button class="btn btn-light btn-lg w-100 py-3" onclick="generateMoreNotes()">
                                <i class="bi bi-plus-circle me-2"></i>
                                Generate More Notes
                            </button>
                        </div>
                    </div>

                    <div class="text-center mt-4">
                        <small class="text-white-50">
                            <i class="bi bi-lightbulb me-1"></i>
                            Tip: Highlight any text for quick explanations in the side panel
                        </small>
                    </div>

                </div>
            </div>
        </div>
    </div>

<div id="text-selection-popup" class="text-selection-popup">
    <div class="selected-text-display mb-3">
        <div class="text-muted" style="font-size: 0.8rem; margin-bottom: 4px;">Selected Text:</div>
        <div id="popup-selected-text" class="selected-text-highlight" style="font-size: 0.9rem; line-height: 1.3;">
        </div>
    </div>
    
    <button class="expansion-option" onclick="expandText('explain')">
        <i class="bi bi-chat-dots"></i>
        Explain
    </button>
    <button class="expansion-option" onclick="expandText('examples')">
        <i class="bi bi-lightbulb"></i>
        Examples
    </button>
    <button class="expansion-option" onclick="expandText('simplify')">
        <i class="bi bi-arrow-down-circle"></i>
        Simplify
    </button>
    <button class="expansion-option" onclick="expandText('context')">
        <i class="bi bi-info-circle"></i>
        Context
    </button>
    
    <div class="custom-question-section mt-2">
        <div class="input-group">
            <input type="text" 
                   id="popup-custom-question" 
                   class="form-control" 
                   placeholder="Ask a custom question..."
                   style="font-size: 0.9rem; border-radius: 6px 0 0 6px;">
            <button class="btn btn-primary" 
                    onclick="submitCustomFromPopup()"
                    style="border-radius: 0 6px 6px 0; font-size: 0.9rem;">
                <i class="bi bi-send"></i>
            </button>
        </div>
    </div>
</div>



    <div id="side-expansion-bubble" class="side-expansion-bubble">
        <div class="bubble-header">
            <h6 class="bubble-title" id="bubble-title">Explanation</h6>
            <button class="close-bubble" onclick="closeSideBubble()">×</button>
        </div>
        <div class="selected-text-preview" id="selected-text-preview">
        </div>
        <div class="bubble-content" id="bubble-content">
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        let selectedText = '';
        let currentExpansionType = '';
        let selectionPosition = { x: 0, y: 0 };
      function submitCustomFromPopup() {
    const questionInput = document.getElementById('popup-custom-question');
    const customQuestion = questionInput.value.trim();
    
    if (!customQuestion) {
        alert('Please enter a question');
        return;
    }
    
    expandText('custom', customQuestion);
    
    questionInput.value = '';
}
        document.addEventListener('DOMContentLoaded', function() {
            const notesText = document.getElementById('notes-text');
            const popup = document.getElementById('text-selection-popup');
            const sideBubble = document.getElementById('side-expansion-bubble');
            notesText.addEventListener('mouseup', function(e) {
                const selection = window.getSelection();
                const text = selection.toString().trim();
                
                if (text.length > 0) {
                    selectedText = text;
                    const range = selection.getRangeAt(0);
                    const rect = range.getBoundingClientRect();
                    selectionPosition = { 
                        x: e.pageX, 
                        y: e.pageY,
                        selectionTop: rect.top + window.scrollY,
                        selectionHeight: rect.height
                    };
                    showSelectionPopup(e.pageX, e.pageY);
                } else {
                    hideSelectionPopup();
                }
            });

            document.addEventListener('click', function(e) {
                if (!popup.contains(e.target) && !notesText.contains(e.target) && !sideBubble.contains(e.target)) {
                    hideSelectionPopup();
                    closeSideBubble();
                }
            });

            window.addEventListener('scroll', function() {
                hideSelectionPopup();
                updateBubblePosition();
            });

            window.addEventListener('resize', updateBubblePosition);
        });
function updateBubblePosition() {
    const bubble = document.getElementById('side-expansion-bubble');
    if (bubble.style.display === 'block' && selectionPosition.selectionTop) {
        const currentScroll = window.scrollY;
        const expectedTop = selectionPosition.selectionTop - currentScroll;
        const currentTop = parseInt(bubble.style.top);
        
        if (Math.abs(expectedTop - currentTop) > 50) {
            let top = expectedTop;
            
            const bubbleHeight = bubble.offsetHeight;
            const viewportHeight = window.innerHeight;
            
            if (top + bubbleHeight > viewportHeight - 20) {
                top = viewportHeight - bubbleHeight - 20;
            }
            if (top < 20) {
                top = 20;
            }
            
            bubble.style.top = top + 'px';
        }
    }
}

        function showSelectionPopup(x, y) {
    const popup = document.getElementById('text-selection-popup');
    
    document.getElementById('popup-selected-text').textContent = selectedText;
    
    let top = selectionPosition.selectionTop - window.scrollY;
    
    const popupHeight = 400;
    const viewportHeight = window.innerHeight;
    
    if (top + popupHeight > viewportHeight - 20) {
        top = viewportHeight - popupHeight - 20;
    }
    if (top < 20) {
        top = 20;
    }
    
    popup.style.top = top + 'px';
    popup.style.transform = 'translateY(0)'; 
    popup.style.display = 'block';
}

function hideSelectionPopup() {
    const popup = document.getElementById('text-selection-popup');
    popup.classList.remove('show');
    
    setTimeout(() => {
        popup.style.display = 'none';
    }, 300);
}


        async function expandText(type, customQuestion = '') {
    if (!selectedText) return;

    currentExpansionType = type;
    hideSelectionPopup();
    
    showSideBubble(type);
    
    document.getElementById('bubble-content').innerHTML = `
        <div class="expansion-loading">
            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
            Loading...
        </div>
    `;

    try {
        const expandedContent = await generateExpansion(selectedText, type, customQuestion);
        displayExpansionInSideBubble(expandedContent, type);
    } catch (error) {
        console.error('Error expanding text:', error);
        document.getElementById('bubble-content').innerHTML = `
            <div class="text-danger">
                <i class="bi bi-exclamation-triangle me-1"></i>
                Failed to load explanation
            </div>
        `;
    }
}



        function showCustomQuestionInput() {
            document.getElementById('bubble-content').innerHTML = `
                <div class="custom-question-input">
                    <textarea placeholder="Type your question about the selected text..." 
                              id="custom-question" rows="3" class="form-control mb-2"></textarea>
                    <button onclick="submitCustomQuestion()" class="btn btn-primary btn-sm">
                        <i class="bi bi-send me-1"></i>
                        Ask Question
                    </button>
                </div>
            `;

            document.getElementById('custom-question').focus();
        }

async function submitCustomQuestion() {
    const questionInput = document.getElementById('custom-question');
    const customQuestion = questionInput.value.trim();
    
    if (!customQuestion) {
        alert('Please enter a question');
        return;
    }
    
    document.getElementById('bubble-content').innerHTML = `
        <div class="expansion-loading">
            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
            Processing your question...
        </div>
    `;
    
    try {
        const response = await fetch('/api/expand-text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                text: selectedText,
                type: 'custom',
                customQuestion: customQuestion,
                topic: '<%= topic %>',
                gradeLevel: '<%= gradeLevel %>'
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to get response');
        }
        
        const data = await response.json();
        document.getElementById('bubble-title').textContent = `Answer to Your Question`;
        
        document.getElementById('selected-text-preview').innerHTML = `
            <strong>Your Question:</strong> "${customQuestion}"
        `;
        
        displayExpansionInSideBubble(data.expansion, 'custom');
        
        questionInput.value = '';
        
    } catch (error) {
        console.error('Error submitting question:', error);
        document.getElementById('bubble-content').innerHTML = `
            <div class="text-danger">
                <i class="bi bi-exclamation-triangle me-1"></i>
                Failed to process question. Please try again.
            </div>
        `;
    }
}

        function showSideBubble(type) {
            const bubble = document.getElementById('side-expansion-bubble');
            const titles = {
                'explain': 'Explanation',
                'examples': 'Examples',
                'simplify': 'Simplified',
                'context': 'Context',
                'custom': 'Your Question'
            };

            document.getElementById('bubble-title').textContent = titles[type];
            document.getElementById('selected-text-preview').innerHTML = `
                <strong>Selected:</strong> "${selectedText}"
            `;
            
    
            let top = selectionPosition.selectionTop - window.scrollY;
            
            const viewportHeight = window.innerHeight;
            if (top + 400 > viewportHeight - 20) {
                top = viewportHeight - 420;
            }
            if (top < 20) {
                top = 20;
            }
            
            bubble.style.top = top + 'px';
            bubble.style.display = 'block';
        }

        function closeSideBubble() {
            document.getElementById('side-expansion-bubble').style.display = 'none';
        }

        async function generateExpansion(text, type, customQuestion = '') {
    const prompts = {
        'explain': `Briefly explain: "${text}". Give a concise definition and key points in 2-3 sentences.`,
        'examples': `Provide 2-3 quick examples of: "${text}". Keep it short and practical.`,
        'simplify': `Simplify: "${text}". Explain in simple terms in 1-2 sentences.`,
        'context': `Provide brief context for: "${text}". Explain why it's important in 2-3 sentences.`
    };

    const body = {
        text: text,
        type: type,
        topic: '<%= topic %>',
        gradeLevel: '<%= gradeLevel %>'
    };

    if (type === 'custom' && customQuestion) {
        body.customQuestion = customQuestion;
    } else {
        body.prompt = prompts[type];
    }

    const response = await fetch('/api/expand-text', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(body)
    });

    if (!response.ok) {
        throw new Error('Failed to generate expansion');
    }

    const data = await response.json();
    return data.expansion;
}


        function displayExpansionInSideBubble(content, type) {
            document.getElementById('bubble-content').innerHTML = content;

            if (window.MathJax) {
                MathJax.typesetPromise([document.getElementById('bubble-content')]);
            }
        }

        function copyToClipboard() {
            const notesText = document.querySelector('.notes-text').innerText;
            navigator.clipboard.writeText(notesText).then(() => {
                showToast('Notes copied to clipboard!');
            }).catch(err => {
                console.error('Failed to copy: ', err);
                showToast('Failed to copy notes', 'error');
            });
        }

        function generateMoreNotes() {
            window.location.href = '/?topic=<%= encodeURIComponent(topic) %>&gradeLevel=<%= gradeLevel %>';
        }

        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            toastContainer.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 3000);
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            document.body.appendChild(container);
            return container;
        }
    </script>

    <style>
        .notes-text {
            font-size: 1.1rem;
            line-height: 1.8;
            color: #2d3748;
            user-select: text;
        }

        .notes-text h1,
        .notes-text h2,
        .notes-text h3,
        .notes-text h4,
        .notes-text h5,
        .notes-text h6 {
            color: var(--bs-primary);
            margin: 2rem 0 1rem 0;
            font-weight: 600;
        }

        .notes-text h1 { font-size: 2.2rem; border-bottom: 2px solid var(--bs-primary); padding-bottom: 0.5rem; }
        .notes-text h2 { font-size: 1.8rem; }
        .notes-text h3 { font-size: 1.5rem; }
        .notes-text h4 { font-size: 1.25rem; }

        .notes-text p {
            margin-bottom: 1.2rem;
            text-align: justify;
        }

        .notes-text ul,
        .notes-text ol {
            margin: 1.5rem 0;
            padding-left: 2rem;
        }

        .notes-text li {
            margin-bottom: 0.8rem;
        }

        .notes-text strong,
        .notes-text b {
            color: var(--bs-primary);
            font-weight: 600;
        }

        .notes-text em,
        .notes-text i {
            color: #6c757d;
            font-style: italic;
        }

        .notes-text code {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            color: #e83e8c;
        }

        .notes-text pre {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid var(--bs-primary);
            overflow-x: auto;
            margin: 1.5rem 0;
        }

        .notes-text blockquote {
            border-left: 4px solid var(--bs-primary);
            background: #f8f9ff;
            padding: 1rem 1.5rem;
            margin: 1.5rem 0;
            font-style: italic;
            border-radius: 0 8px 8px 0;
        }

        .notes-text table {
            width: 100%;
            border-collapse: collapse;
            margin: 1.5rem 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .notes-text th,
        .notes-text td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }

        .notes-text th {
            background: var(--bs-primary);
            color: white;
            font-weight: 600;
        }

        .notes-text tr:hover {
            background: #f8f9fa;
        }

        @media print {
            body {
                background: white !important;
            }
            
            .btn, .text-white-50, .bg-gradient-primary, .side-expansion-bubble {
                display: none !important;
            }
            
            .card {
                box-shadow: none !important;
                border: 1px solid #dee2e6 !important;
            }
            
            .notes-text {
                color: black !important;
            }
        }

        @media (max-width: 768px) {
            .card-body {
                padding: 2rem !important;
            }
            
            .notes-text {
                font-size: 1rem;
            }
            
            .notes-text h1 { font-size: 1.8rem; }
            .notes-text h2 { font-size: 1.5rem; }
            .notes-text h3 { font-size: 1.3rem; }
        }

        .card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15) !important;
        }

        .btn {
            transition: all 0.3s ease;
        }
    </style>
</body>
</html>
